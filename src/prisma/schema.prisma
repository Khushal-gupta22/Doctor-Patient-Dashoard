generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model appointment {
  id                         Int                          @id @default(autoincrement())
  doctorEmail                String
  date                       DateTime
  starttime                  DateTime
  endtime                    DateTime
  status                     String
  doctor                     doctor                       @relation(fields: [doctorEmail], references: [email], map: "Appointment_doctorEmail_fkey")
  diagnoses                  diagnoses[]
  patientsattendappointments patientsattendappointments[]

  @@index([doctorEmail], map: "Appointment_doctorEmail_fkey")
}

model diagnoses {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  doctorEmail   String
  diagnosis     String
  prescription  String
  appointment   appointment @relation(fields: [appointmentId], references: [id], map: "Diagnoses_appointmentId_fkey")
  doctor        doctor      @relation(fields: [doctorEmail], references: [email], map: "Diagnoses_doctorEmail_fkey")

  @@index([appointmentId], map: "Diagnoses_appointmentId_fkey")
  @@index([doctorEmail], map: "Diagnoses_doctorEmail_fkey")
}

model docshaveschedules {
  scheduleId  Int
  doctorEmail String
  doctor      doctor   @relation(fields: [doctorEmail], references: [email], map: "DocsHaveSchedules_doctorEmail_fkey")
  schedule    schedule @relation(fields: [scheduleId], references: [id], map: "DocsHaveSchedules_scheduleId_fkey")

  @@id([scheduleId, doctorEmail])
  @@index([doctorEmail], map: "DocsHaveSchedules_doctorEmail_fkey")
}

model doctor {
  email              String               @id
  gender             String
  password           String
  name               String
  phone_number       String?
  appointment        appointment[]
  diagnoses          diagnoses[]
  docshaveschedules  docshaveschedules[]
  doctorviewshistory doctorviewshistory[]
}

model doctorviewshistory {
  historyId      Int
  doctorEmail    String
  doctor         doctor         @relation(fields: [doctorEmail], references: [email], map: "DoctorViewsHistory_doctorEmail_fkey")
  medicalhistory medicalhistory @relation(fields: [historyId], references: [id], map: "DoctorViewsHistory_historyId_fkey")

  @@id([historyId, doctorEmail])
  @@index([doctorEmail], map: "DoctorViewsHistory_doctorEmail_fkey")
}

model medicalhistory {
  id                    Int                     @id @default(autoincrement())
  date                  DateTime
  conditions            String
  surgeries             String
  medication            String
  doctorviewshistory    doctorviewshistory[]
  patientmedicalhistory patientmedicalhistory[]
}

model patient {
  email                      String                       @id
  password                   String
  name                       String
  address                    String
  gender                     String
  phone_number               String?
  birthdate                  DateTime?
  patientmedicalhistory      patientmedicalhistory[]
  patientsattendappointments patientsattendappointments[]
}

model patientmedicalhistory {
  patientEmail   String
  historyId      Int
  medicalhistory medicalhistory @relation(fields: [historyId], references: [id], map: "PatientMedicalHistory_historyId_fkey")
  patient        patient        @relation(fields: [patientEmail], references: [email], map: "PatientMedicalHistory_patientEmail_fkey")

  @@id([patientEmail, historyId])
  @@index([historyId], map: "PatientMedicalHistory_historyId_fkey")
}

model patientsattendappointments {
  patientEmail  String
  appointmentId Int
  concerns      String
  symptoms      String
  appointment   appointment @relation(fields: [appointmentId], references: [id], map: "PatientsAttendAppointments_appointmentId_fkey")
  patient       patient     @relation(fields: [patientEmail], references: [email], map: "PatientsAttendAppointments_patientEmail_fkey")

  @@id([patientEmail, appointmentId])
  @@index([appointmentId], map: "PatientsAttendAppointments_appointmentId_fkey")
}

model schedule {
  id                Int                 @id @default(autoincrement())
  starttime         DateTime
  endtime           DateTime
  breaktime         DateTime
  day               String
  docshaveschedules docshaveschedules[]
}
